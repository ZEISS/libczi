// SPDX-FileCopyrightText: 2017-2022 Carl Zeiss Microscopy GmbH
//
// SPDX-License-Identifier: LGPL-3.0-or-later

#pragma once

// those numbers define the version of libCZI
#define LIBCZI_VERSION_MAJOR "@libCZI_VERSION_MAJOR@"
#define LIBCZI_VERSION_MINOR "@libCZI_VERSION_MINOR@"
#define LIBCZI_VERSION_PATCH "@libCZI_VERSION_PATCH@"
#define LIBCZI_VERSION_TWEAK "@libCZI_VERSION_TWEAK@"

// if the host system is a big-endian system, this is "1", otherwise 0
#define LIBCZI_ISBIGENDIANHOST @libCZI_ISBIGENDIANHOST@

// if the include-file "endian.h" is available, then this is "1", otherwise 0
#define LIBCZI_HAVE_ENDIAN_H @libCZI_HAVE_ENDIAN_H@

// whether the processor can load integers from an unaligned address, if this
//  is 1 it means that we cannot load an integer from an unaligned address (we'd
//  get a bus-error if we try), 0 means that the CPU can load from unaligned addresses
#define LIBCZI_SIGBUS_ON_UNALIGNEDINTEGERS @libCZI_CrashOnUnalignedIntegers@

#define LIBCZI_CXX_COMPILER_IDENTIFICATION "@libCZI_CompilerIdentification@"

// whether the function "aligned_alloc" is available
#define LIBCZI_HAVE_ALIGNED_ALLOC @libCZI_HAVE_ALIGNED_ALLOC@

// whether the function "_aligned_malloc" is available
#define LIBCZI_HAVE__ALIGNED_MALLOC @libCZI_HAVE__ALIGNED_MALLOC@

// whether we can use pread/pwrite-APIs (for implementing file-stream objects), only relevant if not Win32-environment
#define LIBCZI_USE_PREADPWRITEBASED_STREAMIMPL @libCZI_UsePreadPwriteBasedStreamImplementation@

#define LIBCZI_REPOSITORYREMOTEURL "@libCZI_REPOSITORYREMOTEURL@"

#define LIBCZI_REPOSITORYBRANCH    "@libCZI_REPOSITORYBRANCH@"

#define LIBCZI_REPOSITORYHASH      "@libCZI_REPOSITORYHASH@"

// whether the header "immintrin.h" is available and AVX-SIMD intrinsics can be used
#define LIBCZI_HAS_AVXINTRINSICS   @libCZI_HAS_AVXINTRINSICS@

// whether ARM-Neon-intrinsics can be used
#define LIBCZI_HAS_NEOININTRINSICS @libCZI_HAS_NEOININTRINSICS@