name: CMake

on:
  push:
    branches: ["main", "jbl/azure_sdk_experimental"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        build: [Release, Debug]
        os: [ubuntu-latest, windows-latest]
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Windows)
        if: ${{ (matrix.OS == 'windows-latest') }}
        # on Windows, we rely on vcpkg to pull in dependencies
        shell: bash
        run: |
          vcpkg install azure-storage-blobs-cpp:x64-windows-static
          vcpkg install azure-identity-cpp:x64-windows-static
          vcpkg install rapidjson 'curl[ssl]' --triplet x64-windows-static

      - name: Install dependencies (Linux)
        if: ${{ (matrix.OS == 'ubuntu-latest') }}
        # on Linux, we use apt to get our dependencies
        shell: bash
        run: |
          sudo apt-get install zlib1g-dev -y
          sudo apt-get install libpng-dev -y
          sudo apt-get install libfreetype6-dev -y
          sudo apt-get install rapidjson-dev -y
          sudo apt-get install libssl-dev -y
          vcpkg install azure-storage-blobs-cpp azure-identity-cpp

      - name: Install Azurite (for Azure SDK based stream tests)
        shell: bash
        run: |
          npm install --location=global azurite@3.30.0

      - name: Configure CMake (Windows)
        if: ${{ (matrix.OS == 'windows-latest') }}
        shell: bash
        run: |
          # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
          # on Windows, we need to point CMake to the vcpkg-toolchain-file
          cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{matrix.build}} -DLIBCZI_BUILD_CZICMD=ON -DLIBCZI_BUILD_CURL_BASED_STREAM=ON -DLIBCZI_BUILD_AZURESDK_BASED_STREAM=ON -DLIBCZI_BUILD_PREFER_EXTERNALPACKAGE_LIBCURL=ON -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static

      - name: Configure CMake (Linux)
        if: ${{ (matrix.OS == 'ubuntu-latest') }}
        shell: bash
        run: |
          cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{matrix.build}} -DLIBCZI_BUILD_CZICMD=ON -DLIBCZI_BUILD_CURL_BASED_STREAM=ON -DLIBCZI_BUILD_PREFER_EXTERNALPACKAGE_LIBCURL=OFF -DLIBCZI_BUILD_AZURESDK_BASED_STREAM=ON -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build}}

      - name: Setup Azurite
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          # find the CZIcmd executable (we just built it)
          czicmd=$(find ./build \( -name CZIcmd -o -name CZIcmd.exe \) -print0 | xargs -0 realpath)
          mkdir -p azurite
          cd azurite
          # now use the CZIcmd executable to create a test CZI file
          "$czicmd" --command CreateCZI --createbounds "C0:2T0:2" --generatorpixeltype Gray8 --compressionopts "zstd1:ExplicitLevel=2;PreProcess=HiLoByteUnpack"  --createsubblocksize "1024x1024" -o test  --bitmapgenerator default
          ls -l
          # start Azurite in the background
          azurite --inMemoryPersistence --silent  &
          disown # Disown the process so it persists after this step
          # this is the "default connection string" for Azurite
          connectionstring="DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"
          # create a blob container "testcontainer"
          az storage container create --name testcontainer  --connection-string "$connectionstring"
          # upload the test CZI file to the container
          az storage blob upload --container-name testcontainer --file "./test.czi" --name testblob --connection-string "$connectionstring"
          echo "UNITTEST_AZUREBLOBSTORE_CONNECTIONSTRING=\"$connectionstring\"" >> $GITHUB_ENV

      - name: Test
        working-directory: ${{github.workspace}}/build
        env:
          AZURE_BLOB_STORE_CONNECTION_STRING: ${{ env.UNITTEST_AZUREBLOBSTORE_CONNECTIONSTRING }}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # Use debug flag to show all exeucted tests
        run: ctest --debug -C ${{matrix.build}}

      - name: Upload CZICmd as artifact (Windows)
        working-directory: ${{github.workspace}}/build
        if: ${{ (matrix.OS == 'windows-latest') && ( matrix.build == 'Release') }}
        shell: bash
        run: |
          mkdir release
          name="CZICmd-windows-x64-$(git describe --always)"
          mkdir "release/${name}"
          cp Src/CZICmd/Release/CZIcmd.exe "release/${name}/"
          echo "artifactName=${name}" >> "$GITHUB_ENV"
          echo "artifactPath=${{github.workspace}}/build/release/${name}" >> "$GITHUB_ENV"

      - name: Upload CZICmd as artifact (Linux)
        working-directory: ${{github.workspace}}/build
        if: ${{ (matrix.OS == 'ubuntu-latest') && ( matrix.build == 'Release') }}
        shell: bash
        run: |
          mkdir release
          name="CZICmd-linux-x64-$(git describe --always)"
          mkdir "release/${name}"
          cp Src/CZICmd/CZIcmd "release/${name}/"
          echo "artifactName=${name}" >> "$GITHUB_ENV"
          echo "artifactPath=${{github.workspace}}/build/release/${name}" >> "$GITHUB_ENV"

      - name: Upload artifacts
        if: ${{ ( (matrix.OS == 'windows-latest') || (matrix.OS == 'ubuntu-latest') ) && (matrix.build == 'Release') }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.artifactPath }}/
          name: ${{ env.artifactName }}

      # Coverage collection based on https://about.codecov.io/blog/how-to-set-up-codecov-with-c-plus-plus-and-github-actions/
      - name: Prepare Coverage
        if: ${{ (matrix.OS == 'windows-latest') && (matrix.build == 'Debug') }}
        run: |
          choco install OpenCppCoverage -y --no-progress
          echo "C:\Program Files\OpenCppCoverage" >> "$env:GITHUB_PATH"

      - name: Get Coverage
        if: ${{ (matrix.OS == 'windows-latest') && (matrix.build == 'Debug') }}
        working-directory: ${{github.workspace}}/build/Src/libCZI_UnitTests/${{matrix.build}}
        shell: cmd
        run: OpenCppCoverage.exe --export_type cobertura:${{github.workspace}}\coverage.xml --config_file "${{github.workspace}}\opencppcoverage.txt" -- libCZI_UnitTests.exe

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        if: ${{ (github.ref == 'refs/heads/main') && (matrix.OS == 'windows-latest') && (matrix.build == 'Debug') }}
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
          # Only one flag to be safe with
          # https://docs.codecov.com/docs/flags#one-to-one-relationship-of-flags-to-uploads
          flags: ${{matrix.OS}}
          token: ${{ secrets.CODECOV_TOKEN }}
